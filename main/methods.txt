Creating New SiD Models (METHOD)
    
    Updating the Old SiD Model
        
        The ultimate goal of this study was to analyze new modification to the SiD model. However, before we could look into the future of the SiD, we had to take it out of the past. Prior to my modifications, the most up-to-date simulation model of the SiD was the SiDloi3 model. However, the SiDloi3 model was written in 2011, and numerous changes to the SiD's engineering design had been made since, rendering SiDloi3 outdated. Thus, the first order of business was to ensure that the simulation model was matched to the current engineering design; at least, the aspects of it we were concerned with. As discussed in the introduction, this study focused exclusively on the interaction region of the detector, and as such only the interaction region was fully updated. But even with the scope of the project restricted, the update was no simple task.

        The most pressing change by far was the realignment of the BeamCal. In the SiDloi3 model, the BeamCal was designed to be concentric about the simulation space's z-axis (figure [beamcal_zaligned]). The most recent engineering designs however (provided by Thomas Markievicz), place the BeamCal concentric about the outgoing beampipe (figure [beamcal_outaligned]). In general, modifications to the SiD model are made by editing a specific xml file titled "compact.xml". The modified compact is then run through a program called GeomConverter, which is an extension of the Java based LCSim (Linear Collider Simulator) framework. However, the GeomConverter package did not support off-center alignments of any detector elements, requiring significant modifications be made to the source code (the full source changelog can be found in appendix 1A). Once the changes were made, and the BeamCal appropriately realigned to be concentric about the outgoing beampipe, it was a simple matter to similarly realign the BeamCal's associated masks: the ForwardLowZ mask (figure [forwardlowz]), and the ForwardM1 mask (figure [forwardm1]). 

        Hypothetically speaking, once the BeamCal and its masks were properly realigned, the study could have proceeded forward without any further updates to the SiD model. Unfortunately, usage of CERN ROOT's gdml viewer revealed that the realignment of the BeamCal caused it to collide with a support tube structure (figure [support_tube]). It was quickly apparent that altering the support tube structure alone would be useless, as this would result in even more collisions (figure [support_tube2]). Thus, additional modifications to the detector elements surounding the support (notably the Ecal, Hcal, and Muon Detector) were needed. While these modifications were in line with Markievicz's engineering designs, they only constitute partial modifications to the non-interaction region elements.

        In addition to the BeamCal, it was also decided that the LumiCal (figure 1.6) should also be updated. The reason for this is that the LumiCal places constraints on the angles at which particles can hit the BeamCal (figure 1.7). Updating the LumiCal brought about a problem of its own though. In the most recent engineering designs, the LumiCal was moved closer to the interaction point, such that the outermost layer of the SiTracker Endcap surrounded it (figure 1.8). While this poses no realistic problem, the GEANT4 simulation software would not tolerate it, as this placed the LumiCal within a virtual boundry called the "Tracking Volume". In short, the Tracking Volume causes all elements inside it to store significantly more simulation information. Because the LumiCal is a calorimeter, and therefore induces a large shower of particles, storing the additional information from the Tracking Volume caused excessive RAM usage, making simulations impossible. As a result, we were forced to move the outermost layer of the SiTracker endcap closer to the interaction point, so that it no longer surrounded the LumiCal. Upon finishing this adjustment though, the SiD forward region was fully up to date, and new design decisions could be implemented (the full geometry changelog can be found in appendix 1B).


    Experimenting with New SiD Models

        With the sidloi3 sufficiently updated, experiments on the various alternate configurations could begin. The three geometric changes, as discussed in the introduction, are the length of the L*, the configuration of the plug region of the BeamCal, and the inclusion of an anti-did field. Six lcdd simulation geometries were generated (using the same tools discussed in the previous section) in order to analyze these changes, with figure [geom_chart] displaying the range of configurations. For the two detector elements studied (BeamCal and Vertex Detector), two simulation methods were used. 
        
        For the BeamCal, these lcdd files were run through SLIC (a GEANT4 wrapper), on SLAC's LSF computing cluster, in order to generate 300 pairbackground events and 10,000 ad-hoc high energy signal events per geometric configuration. The discrepency in event numbers is due to the high time demands of generating pairbackgrounds, coupled with the fact that pairbackgrounds are not the main focus of the BeamCal study (thus requiring less rigorous statistics).

        The simulations performed for the Vertex detector underwent a different process. The studies for the Vertex Detector are solely dependant on pairbackground events, and demand the rigorous statistics the BeamCal was able to avoid. As already mentioned, pairbackgrounds are very computationaly intensive and time consuming to generate, to a degree the SLAC cluster is unequipped for. As such, I turned to PNNL physicist and SiD tech supportor [figure out the right title] Jan Strube. Jan then used the Open Science Grid (OSG) to generate 2500 pairbackground events per geometric configuration (2500 being the number of bunch crossings in a luminosity upgrade train). Additionally, in order to save hard disk space, Jan stripped the pairbackground simulation files of all information except that pertaining to the Vertex Detector. 

        The end result of both simulation methods was a large collection of slcio files, which contained the details of the various simulations. From here, the LCSim framework was used as a backend to a personal suite of analysis code I wrote to study the physics of the BeamCal and Vertex Detector. For the Vertex Detector, a program was used to pixellate the hits on the detector and then perform fractional occupancy analysis on the resulting pixels as function of various parameters (discussed further in the Analysis section). For the BeamCal, the analysis is more complicated.
        
        The analysis of the BeamCal studies the efficiency of its signal reconstruction efficiency. It is appropriate then to provide an overview of how the reconstruction algorithm works (a more thorough discussion can be found in figure [Bogert thesis]). The algorithm first populates the pixels of the BeamCalorimeter with the information provided by both the signal electron and the pairbackground lcdd files, one event at a time. It then performs a sweep across the tenth layer of the BeamCal, aggregating the pixels into clusters called 'pallets'. It selects the pallets with the top 50 highest background-subtracted energies deposited in them. The selected pallets are then 'extended' to include all pixels in the same x/y locations in layers 10 through 40, summing the raw energy of all included pixels to produce a new structure refered to as a 'cylinder'. The 50 cylinders are iterated through. If the background-subtracted energy of any of the cylinders exceeds a particular sigma cut, then the event is deemed to contain a signal event and rejected. The sigma cut is chosen such that no more than ten percent of all events which do \it{not} contain a signal event are rejected. This algorithm's efficiency in correctly identifying signal electrons, particularly as a function of radius, was then studied and compared across the range of geometric configurations.
